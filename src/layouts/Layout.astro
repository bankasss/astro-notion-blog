---
import { PUBLIC_GA_TRACKING_ID, ENABLE_LIGHTBOX } from '../server-constants.ts'
import { getDatabase } from '../lib/notion/client.ts'
import { getNavLink, getStaticFilePath, filePath } from '../lib/blog-helpers.ts'
import '../styles/syntax-coloring.css'
import GoogleAnalytics from '../components/GoogleAnalytics.astro'

export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
}

const { title = '', description = '', path = '/', ogImage = '' } = Astro.props

const database = await getDatabase()

const siteTitle = title ? `${title} - ${database.Title}` : database.Title
const siteDescription = description ? description : database.Description
const siteURL = "ttps://nikkinikki.vercel.app/"//new URL(getNavLink(path), Astro.site).toString()
const siteOGImage = new URL(
  getStaticFilePath('/default-og-image.png'),
  Astro.site
)

let coverImageURL: string
if (database.Cover) {
  if (database.Cover.Type === 'external') {
    coverImageURL = database.Cover.Url
  } else if (database.Cover.Type === 'file') {
    try {
      coverImageURL = filePath(new URL(database.Cover.Url))
    } catch (err) {
      console.log('Invalid DB cover image URL')
    }
  }
}

let customIconURL: string
if (database.Icon && database.Icon.Type === 'file') {
  try {
    customIconURL = filePath(new URL(database.Icon.Url))
  } catch (err) {
    console.log('Invalid DB custom icon URL')
  }
}

const asidePaddingTop = coverImageURL ? '200px' : '60px'
---

<!DOCTYPE html>
<html lang="ja" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={database.Title} />
    <meta property="og:image" content="https://nikkinikki.vercel.app/default-og-image.png?20230903" />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content="https://nikkinikki.vercel.app/default-og-image.png?20230903" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
  </head>
  <body id="body">
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <div class="container">
      <main>
        {
          coverImageURL && (
            <div class="cover">
              <img src="/cover.png"{/*coverImageURL*/} />
            </div>
          )
        }

        <div class="content">
          <header id="header">
            <h1>
              <a href={getNavLink('/')}>
                <img src="/icon.jpg" />
                {
                  database.Icon && database.Icon.Type === 'emoji' ? (
                    <>
                      <span>{database.Icon.Emoji}</span>
                      {database.Title}
                    </>
                  ) : database.Icon && database.Icon.Type === 'external' ? (
                    <>
                      <img src={database.Icon.Url} />
                      {database.Title}
                    </>
                  ) : database.Icon && database.Icon.Type === 'file' ? (
                    <>
                      <img src={customIconURL} class="custom-icon" />
                      {database.Title}
                    </>
                  ) : (
                    database.Title
                  )
                }
              </a>
            </h1>
            <div class="description">
              {database.Description}
            </div>
          </header>

          <slot name="main" />

          <footer>
            <div>
              <span>Powered by</span>
              <a href="https://github.com/otoyo/astro-notion-blog">astro-notion-blog</a>
            </div>
          </footer>
        </div>
      </main>

      <aside>
        <slot name="aside" />
      </aside>
    </div>

    {
      ENABLE_LIGHTBOX && (
        <script src={getStaticFilePath('/scripts/fslightbox.js')} />
      )
    }
  </body>
</html>

<style lang="scss" define:vars={{ asidePaddingTop }}>
  .container {
    display: flex;
    min-height: 100vh;
    background: var(--bg);
  }
  @media (min-width: 641px) {
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
  }
  @media (max-width: 640px) {
    .container {
      display: block;
    }
  }

  main {
    flex: 1;
    order: 2;
    justify-content: space-between;
  }
  @media (min-width: 641px) {
    main {
      overflow-x: hidden;
    }
  }
  @media (max-width: 640px) {
    main {
      order: 1;
      width: 100%;
    }
  }

  aside {
    order: 1;
    width: 300px;
    padding: var(--asidePaddingTop) 20px 20px;
    background-color: var(--aside-bg);
  }
  @media (min-width: 639px) {
    aside {
      border-right: solid 1px #dbdcdd;
    }
  }
  @media (max-width: 640px) {
    aside {
      border-top: solid 1px #dbdcdd;
      order: 2;
      width: 100%;
      padding: 40px 20px 20px;
    }
  }

  div.cover {
    height: 0.5rem;
    img {
      display: block;
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center 60%;
    }
  }

  div.content {
    padding: 20px 40px;
  }
  @media (max-width: 640px) {
    div.content {
      padding: 0 18px;
    }
  }

  main header {
    padding: 20px 0 20px;
    h1 {
      font-weight: 500;
      color: #333;
      a {
        display: block;
        width: fit-content;
        color: inherit;
        &:hover {
          color: inherit;
        }
        img {
          animation: iconanime 2.0s linear 1s infinite;
        }
        @keyframes iconanime{
          0%   { transform: scale(1.0, 1.0) translate(0%, 0%); }
          5%  { transform: scale(1.1, 0.9) translate(0%, 5%); }
          20%  { transform: scale(1.15, 0.8) translate(0%, 15%); }
          25%  { transform: scale(1.0, 1.0) translate(0%, 0%); }
          30%  { transform: scale(0.9, 1.15) translate(0%, -30%); }
          37%  { transform: scale(0.9, 1.15) translate(0%, -20%); }
          43%  { transform: scale(1.15, 0.8) translate(0%, 15%); }
          50% { transform: scale(1.0, 1.0) translate(0%, 0%); }
          100% { transform: scale(1.0, 1.0) translate(0%, 0%); }
        }
        span,
        img {
          display: inline-block;
          font-size: 1.1em;
        }
        span {
          margin-right: 0.3em;
          margin-left: -0.1rem;
        }
        img {
          width: 1.2em;
          height: 1.2em;
          vertical-align: sub;
          &.custom-icon {
            border-radius: var(--radius);
          }
        }
      }
    }
    div.description {
      padding: 0.3rem 0.15rem 0.6rem;
      font-size: 0.95rem;
      transform: rotate(0.05deg);
    }
  }


  main footer {
    margin: 30px 0 10px;
    text-align: center;
    font-size: 0.75rem;
    span {
      color: #777;
    }
    a {
      color: inherit;
      text-decoration: underline;
    }
  }
  @media (max-width: 640px) {
    main footer {
      margin: 0 auto 30px;
    }
  }
</style>

<style is:global>
  @import url('https://fonts.googleapis.com/css2?family=M+PLUS+Rounded+1c:wght@400;500;700&display=swap');

  :root {
    --gap-quarter: 0.25rem;
    --gap-half: 0.5rem;
    --gap: 1rem;
    --gap-double: 2rem;

    --main: #ff8dbe;
    --bg: #fff;
    --aside-bg: #f8f8f8 ;
    --category-bg: rgba(255, 248, 251, 0);
    --fg: #333;
    --accents-1: #666;
    --accents-2: #666;
    --accents-3: #666;
    --geist-foreground: #000;
    --geist-success: #690;

    --radius: 4px;

    --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',
      'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',
      'Helvetica Neue', sans-serif;
    --font-mono: SFMono-Regular, Menlo, Consolas, 'PT Mono', 'Liberation Mono',
      Courier, monospace;
  }

  * {
    box-sizing: border-box;
    word-break: break-word;
  }

  html {
    scroll-behavior: smooth;
  }

  html,
  body {
    padding: 0;
    margin: 0;
    font-size: 16px;
  }

  body {
    min-height: 100vh;
    background: #acb3ba;
    color: var(--fg);
    font-family: 'M PLUS Rounded 1c', sans-serif; 
    background-position: 0 0, 25px 25px;
    background-attachment: fixed;
    background-size: 50px 50px;

    /* Hack */
    overflow-x: hidden;

    -webkit-font-smoothing: antialiased;
    @media (max-width: 640px) {
      background: var(--bg);
    }
  }

  figure {
    margin: 0;
    font-size: 0.85rem;
    color: #999;
    line-height: 1.8rem;
  }

  a {
    color: var(--accents-1);
    text-decoration: none;
  }
  a:hover {
    color: var(--accents-1);
  }

  mark {
    padding: var(--gap-quarter);
    border-radius: var(--radius);
    background: rgba(247, 212, 255, 0.8);
  }

  h1 {
    margin: 0;
    color: var(--fg);
    font-size: 2rem;
    font-weight: 500;
  }

  h2 {
    margin: 0;
    color: var(--fg);
    line-height: 1.3;
    font-size: 1.2rem;
    font-weight: normal;
  }
  h2 > span.tag {
    border-radius: 4px;
    padding: 3px 9px;
    background: rgba(227, 226, 224, 0.5);
  }

  h3 {
    margin: 0;
    color: var(--fg);
    font-size: 1.2rem;
    font-weight: 500;
  }

  @media (max-width: 640px) {
    h1 {
      font-size: 1.6rem;
    }

    h2 {
      font-size: 1.15rem;
    }

    h3 {
      font-size: 1.15rem;
    }
  }

  ol {
    color: #222;
    font-weight: 400;
    font-size: 0.9rem;
    line-height: 1.8rem;
  }
  p {
    transform: rotate(0.03deg);
  }
  p,
  ul {
    color: #222;
    font-weight: 400;
    font-size: 1rem;
    line-height: 1.8rem;
  }
  ul,
  ol {
    margin: 0;
    padding-inline-start: 1.5rem;
  }
  pre {
    margin: 0;
    white-space: pre;
    tab-size: 2;
  }
  pre :global(code) {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  hr {
    display: block;
    height: 1px;
    border: 0;
    margin: 0.3rem 0;
    background-color: #dbdcdd;
  }

  code {
    font-size: 0.9rem;
    background: #f1f1f1;
    color: #eb5757;
    padding: 0.25rem;
    border-radius: var(--radius);
    font-family: var(--font-mono);
  }

  table {
    display: block;
    overflow-x: auto;
    white-space: nowrap;
    border-collapse: collapse;
  }

  table tr {
    vertical-align: top;
  }

  table th {
    font-weight: 600;
    background-color: #f4f4f4;
  }

  table td,
  table th {
    font-size: 0.9rem;
    border: 1px solid #e4e4e4;
    padding: 0.5rem 1rem;
    text-align: left;
    line-height: 1.2rem;
  }

  .col2 {
    display: flex;
  }

  .no-contents {
    padding-left: 0.4rem;
    margin-block-end: 1rem;
    margin-top: 0.4rem;
  }

  ::-webkit-scrollbar{
   width: 10px;
  }
  ::-webkit-scrollbar-track{
    background-color: #ebebeb;
  }
  ::-webkit-scrollbar-thumb{
    background-color: #dbdcdd;
  }
</style>
